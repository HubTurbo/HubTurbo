/*
 * Gradle Configuration File
 *
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.2.1/userguide/tutorial_java_projects.html
 */

// Plugins
plugins {
    id "com.github.kt3k.coveralls" version "2.4.0"
    id "com.github.johnrengelman.shadow" version "1.2.1"
}

allprojects {

    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'jacoco'

    apply plugin: 'checkstyle'
    checkstyle {
        toolVersion = "6.7"
    }

    apply plugin: 'findbugs'

    apply plugin: 'java'

    // TODO: add group here (e.g. group = 'sg.edu.nus.comp.hubturbo')
    version = '3.5.1'
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://repo.eclipse.org/content/repositories/egit-releases/" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }

    project.ext {
        log4jVersion = '2.3'
        controlsfxVersion = '8.40.10-SNAPSHOT'
        gsonVersion = '2.3.1'
        guavaVersion = '18.0'
        jnaVersion = '4.1.0'
        markdown4jVersion = '2.2-cj-1.0'
        openjfxDialogsVersion = '1.0.3'
        egitVersion = '4.0.1.201506240215-r'
        prettytimeVersion = '4.0.0.Final'
        seleniumJavaVersion = '2.46.0'
        seleniumServerVersion = '2.46.0'

        junitVersion = '4.12'
        testFxVersion = '3.1.0'
    }

    dependencies {
        compile "org.apache.logging.log4j:log4j-api:$log4jVersion"
        compile "org.apache.logging.log4j:log4j-core:$log4jVersion"
        compile "org.controlsfx:controlsfx:$controlsfxVersion"
        compile "com.google.code.gson:gson:$gsonVersion"
        compile "com.google.guava:guava:$guavaVersion"
        compile "net.java.dev.jna:jna:$jnaVersion"
        compile "org.commonjava.googlecode.markdown4j:markdown4j:$markdown4jVersion"
        compile "org.controlsfx:openjfx-dialogs:$openjfxDialogsVersion"
        compile "org.eclipse.mylyn.github:org.eclipse.egit.github.core:$egitVersion"
        compile "org.ocpsoft.prettytime:prettytime:$prettytimeVersion"
        compile "org.seleniumhq.selenium:selenium-java:$seleniumJavaVersion"
        compile "org.seleniumhq.selenium:selenium-server:$seleniumServerVersion"

        testCompile "junit:junit:$junitVersion"
        testCompile "org.loadui:testFx:$testFxVersion"
    }

    test {
        forkEvery = 1

        // uncomment to disable gui tests
//        exclude 'guitests'
    }

    jacoco {
        toolVersion = "0.7.5.201505241946"
    }

    jacocoTestReport {
        dependsOn test
        sourceDirectories = project.files(sourceSets.main.allSource.srcDirs)
        classDirectories =  project.files(sourceSets.main.output)
        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it, exclude: 'tests/**')
            })
        }
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    jar {
        manifest {
            attributes 'Main-Class': 'ui.UI'
        }
    }

    assemble.dependsOn shadowJar
}

task checkstyleHtml << {
    ant.xslt(in: checkstyleMain.reports.xml.destination,
             style: file('config/checkstyle/checkstyle-noframes-sorted.xsl'),
             out: new File(checkstyleMain.reports.xml.destination.parent, 'main.html'))
}

checkstyleMain.finalizedBy checkstyleHtml

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

findbugs {
    excludeFilter = file("${projectDir}/config/findbugs/excludeFilter.xml")
}

task jacocoRootReport(type: JacocoReport) {
    dependsOn = allprojects.test
    sourceDirectories = files(allprojects.sourceSets.main.allSource.srcDirs)
    classDirectories =  files(allprojects.sourceSets.main.output)
    executionData = files(allprojects.jacocoTestReport.executionData)
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['github/**', 'backend/github/**'])
        })
    }
    reports {
        html.enabled = true
        xml.enabled = true
    }
}

coveralls {
    sourceDirs = allprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
    group = 'Coverage reports'
    description = 'Uploads the aggregated coverage report to Coveralls'

    dependsOn jacocoRootReport
    onlyIf { System.env.'CI' }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.4' //version required
}
